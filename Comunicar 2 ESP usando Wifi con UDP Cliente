#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_wifi.h"
#include "esp_log.h"
#include "esp_event.h"
#include "esp_system.h"
#include "esp_netif.h"
#include "nvs_flash.h"
#include "driver/gpio.h"
#include "lwip/sockets.h"
#include "esp_err.h"

#define WIFI_SSID "ESP32_AP"
#define WIFI_PASS "12345678"
#define SERVER_IP "192.168.4.1"
#define PORT 3333
#define LED_GPIO 2

static const char *TAG = "UDP_LED";
static EventGroupHandle_t evento_grupal;
const int wifi_conectado_bit = BIT0;

static void wifi_evento_handler(void* arg, esp_event_base_t categoria_evento,
                                int32_t evento_id, void* evento_datos) {
    if (categoria_evento == WIFI_EVENT) {
        if (evento_id == WIFI_EVENT_STA_START) {
            esp_wifi_connect();
        } else if (evento_id == WIFI_EVENT_STA_DISCONNECTED) {
            ESP_LOGW(TAG, "Desconectado, reintentando...");
            esp_wifi_connect();
        }
    } else if (categoria_evento == IP_EVENT && evento_id == IP_EVENT_STA_GOT_IP) {
        xEventGroupSetBits(evento_grupal, wifi_conectado_bit);
    }
}

void wifi_sta(void) {
    ESP_ERROR_CHECK(nvs_flash_init());
    ESP_ERROR_CHECK(esp_netif_init());
    ESP_ERROR_CHECK(esp_event_loop_create_default());
    esp_netif_create_default_wifi_sta();

    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK(esp_wifi_init(&cfg));

    evento_grupal = xEventGroupCreate();

    ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, ESP_EVENT_ANY_ID,
                                                        &wifi_evento_handler, NULL, NULL));
    ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT, IP_EVENT_STA_GOT_IP,
                                                        &wifi_evento_handler, NULL, NULL));

    wifi_config_t wifi_config = {
        .sta = {
            .ssid = WIFI_SSID,
            .password = WIFI_PASS,
        },
    };

    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));
    ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &wifi_config));
    ESP_ERROR_CHECK(esp_wifi_start());

    ESP_LOGI(TAG, "Conectando a WiFi STA...");
    xEventGroupWaitBits(evento_grupal, wifi_conectado_bit, pdFALSE, pdTRUE, portMAX_DELAY);
}

void udp_tarea_cliente(void *pvParameters) {
    int sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_IP);
    if (sock < 0) {
        ESP_LOGE(TAG, "Error creando socket UDP");
        vTaskDelete(NULL);
        return;
    }

    struct sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    inet_pton(AF_INET, SERVER_IP, &server_addr.sin_addr.s_addr);

    gpio_reset_pin(LED_GPIO);
    gpio_set_direction(LED_GPIO, GPIO_MODE_OUTPUT);

    // Enviar mensaje inicial para que el servidor conozca mi IP/puerto
    char hello[] = "HELLO";
    sendto(sock, hello, strlen(hello), 0,
           (struct sockaddr *)&server_addr, sizeof(server_addr));

    char buffer[32];
    while (1) {
        int len = recvfrom(sock, buffer, sizeof(buffer)-1, 0, NULL, NULL);
        if (len > 0) {
            buffer[len] = 0;
            if (strcmp(buffer, "ON\n") == 0) {
                gpio_set_level(LED_GPIO, 1);
                ESP_LOGI(TAG, "LED encendido");
            } else if (strcmp(buffer, "OFF\n") == 0) {
                gpio_set_level(LED_GPIO, 0);
                ESP_LOGI(TAG, "LED apagado");
            }
        }
    }
}

void app_main(void) {
    wifi_sta();
    xTaskCreate(udp_tarea_cliente, "udp_tarea_cliente", 4096, NULL, 5, NULL);
}
