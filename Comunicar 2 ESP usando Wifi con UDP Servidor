#include <string.h>
#include <sys/param.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_wifi.h"
#include "esp_event.h"
#include "nvs_flash.h"
#include "lwip/sockets.h"
#include "lwip/netdb.h"
#include "driver/gpio.h"

#define WIFI_SSID "ESP32_AP"
#define WIFI_PASS "12345678"
#define PORT 3333
#define BOTON_GPIO 4

void wifi_init_softap(void) {
    esp_netif_init();
    esp_event_loop_create_default();
    esp_netif_create_default_wifi_ap();
    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    esp_wifi_init(&cfg);

    wifi_config_t wifi_config = {
        .ap = {
            .ssid = WIFI_SSID,
            .ssid_len = strlen(WIFI_SSID),
            .password = WIFI_PASS,
            .max_connection = 1,
            .authmode = WIFI_AUTH_WPA_WPA2_PSK
        },
    };
    if (strlen(WIFI_PASS) == 0) {
        wifi_config.ap.authmode = WIFI_AUTH_OPEN;
    }
    esp_wifi_set_mode(WIFI_MODE_AP);
    esp_wifi_set_config(WIFI_IF_AP, &wifi_config);
    esp_wifi_start();
}

void app_main(void) {
    // Inicializar NVS
    nvs_flash_init();
    wifi_init_softap();

    // Configurar botón
    gpio_reset_pin(BOTON_GPIO);
    gpio_set_direction(BOTON_GPIO, GPIO_MODE_INPUT);
    gpio_pullup_en(BOTON_GPIO);  // pull-up interno
    gpio_pulldown_dis(BOTON_GPIO);

    // Crear socket UDP
    struct sockaddr_in dest_addr;
    dest_addr.sin_addr.s_addr = htonl(INADDR_BROADCAST);
    dest_addr.sin_family = AF_INET;
    dest_addr.sin_port = htons(PORT);

    int sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_IP);

    int last_state = 0;
    while (1) {
        int estado = gpio_get_level(BOTON_GPIO);
        if (estado == 1 && last_state == 0) {
            // Se presionó el botón → enviar TOGGLE
            sendto(sock, "TOGGLE", strlen("TOGGLE"), 0,
                   (struct sockaddr *)&dest_addr, sizeof(dest_addr));
            printf("Botón presionado, enviando TOGGLE\n");
        }
        last_state = estado;
        vTaskDelay(pdMS_TO_TICKS(50)); // debounce 50 ms
    }
}
