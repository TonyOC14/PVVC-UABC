#include <stdio.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_wifi.h"
#include "esp_event.h"
#include "esp_log.h"
#include "nvs_flash.h"
#include "lwip/sockets.h"
#include "driver/gpio.h"

#define BUTTON_PIN 4
#define UDP_PORT 3333
#define TAG "UDP_BUTTON"

static struct sockaddr_in client_addr; // Dirección del cliente (se actualizará cuando reciba un paquete)
static socklen_t client_addr_len = sizeof(client_addr);

// Inicializa el ESP32 como Access Point
void wifi_ap(void) {
    ESP_ERROR_CHECK(nvs_flash_init());
    ESP_ERROR_CHECK(esp_netif_init());
    ESP_ERROR_CHECK(esp_event_loop_create_default());
    esp_netif_create_default_wifi_ap();

    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK(esp_wifi_init(&cfg));

    wifi_config_t ap_config = {
        .ap = {
            .ssid = "ESP32_AP",
            .ssid_len = strlen("ESP32_AP"),
            .channel = 1,
            .max_connection = 1,
            .authmode = WIFI_AUTH_WPA2_PSK,
            .password = "12345678"
        },
    };

    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_AP));
    ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_AP, &ap_config));
    ESP_ERROR_CHECK(esp_wifi_start());

    ESP_LOGI(TAG, "Red AP creada: SSID=%s", ap_config.ap.ssid);
}

void udp_tarea_servidor(void *pvParameters) {
    int sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_IP);
    if (sock < 0) {
        ESP_LOGE(TAG, "Error creando socket UDP");
        vTaskDelete(NULL);
        return;
    }

    struct sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(UDP_PORT);
    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);

    if (bind(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        ESP_LOGE(TAG, "Error en bind()");
        close(sock);
        vTaskDelete(NULL);
        return;
    }

    ESP_LOGI(TAG, "Servidor UDP esperando cliente en puerto %d", UDP_PORT);

    char buffer[32];
    int estado_anterior = 1;

    // Espera primer mensaje del cliente para conocer su IP/puerto
    int len = recvfrom(sock, buffer, sizeof(buffer)-1, 0,
                       (struct sockaddr *)&client_addr, &client_addr_len);
    if (len > 0) {
        buffer[len] = 0;
        ESP_LOGI(TAG, "Cliente UDP registrado desde %s:%d",
                 inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));
    }

    while (1) {
        int estado_actual = gpio_get_level(BUTTON_PIN);
        if (estado_actual != estado_anterior) {
            estado_anterior = estado_actual;
            char *msg = (estado_actual == 0) ? "ON\n" : "OFF\n";
            sendto(sock, msg, strlen(msg), 0,
                   (struct sockaddr *)&client_addr, client_addr_len);
            ESP_LOGI(TAG, "Mensaje enviado: %s", msg);
        }
        vTaskDelay(pdMS_TO_TICKS(50));
    }
}

void app_main(void) {
    gpio_config_t boton = {
        .pin_bit_mask = 1ULL << BUTTON_PIN,
        .mode = GPIO_MODE_INPUT,
        .pull_up_en = GPIO_PULLUP_ENABLE,
        .pull_down_en = GPIO_PULLDOWN_DISABLE
    };
    gpio_config(&boton);

    wifi_ap();
    xTaskCreate(udp_tarea_servidor, "udp_tarea_servidor", 4096, NULL, 5, NULL);
}
